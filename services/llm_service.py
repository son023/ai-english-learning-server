import os
from typing import List
from models import PronunciationScore, WordError
import requests

# Load environment variables from .env.new file
def load_env_new():
    """Load environment variables from .env.new file"""
    try:
        import os
        env_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env.new')
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
    except Exception as e:
        print(f"Warning: Could not load .env.new file: {e}")

load_env_new()

class LLMService:
    """LLM service s·ª≠ d·ª•ng Gemini API ƒë·ªÉ t·∫°o ph·∫£n h·ªìi ph√°t √¢m b·∫±ng ti·∫øng Vi·ªát"""
    
    def __init__(self):
        """Initialize LLM service"""
        self.gemini_api_key = os.getenv("GEMINI_API_KEY")
        
        if self.gemini_api_key:
            print("LLM service ƒë√£ kh·ªüi t·∫°o v·ªõi Gemini API - Ph·∫£n h·ªìi b·∫±ng ti·∫øng Vi·ªát")
        else:
            print("LLM service ƒë√£ kh·ªüi t·∫°o nh∆∞ng kh√¥ng c√≥ API key - S·ª≠ d·ª•ng feedback m·∫∑c ƒë·ªãnh")
    
    def generate_pronunciation_feedback(self,
                                      original_sentence: str,
                                      transcribed_text: str,
                                      scores: PronunciationScore,
                                      word_errors: List[WordError],
                                      wer_score: float) -> str:
        """T·∫°o ph·∫£n h·ªìi ph√°t √¢m b·∫±ng ti·∫øng Vi·ªát t·ª´ Gemini AI"""
        
        # Return empty if no API key
        if not self.gemini_api_key:
            return ""
        
        try:
            # T·∫°o prompt chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát
            error_summary = self._format_errors(word_errors)
            
            prompt = f"""B·∫°n l√† m·ªôt gi√°o vi√™n ti·∫øng Anh chuy√™n nghi·ªáp, chuy√™n gi√∫p h·ªçc vi√™n ng∆∞·ªùi Vi·ªát c·∫£i thi·ªán ph√°t √¢m. H√£y cung c·∫•p ph·∫£n h·ªìi chi ti·∫øt, mang t√≠nh x√¢y d·ª±ng v·ªÅ l·ªói ph√°t √¢m v·ªõi c√°ch ti·∫øp c·∫≠n ƒë·ªông vi√™n v√† gi√°o d·ª•c.

**Th√¥ng tin h·ªçc vi√™n:**
- Ng√¥n ng·ªØ m·∫π ƒë·∫ª: Ti·∫øng Vi·ªát
- C√¢u m·ª•c ti√™u: "{original_sentence}"
- C√°ch ph√°t √¢m c·ªßa h·ªçc vi√™n: "{transcribed_text}"
- ƒêi·ªÉm ph√°t √¢m: T·ªïng th·ªÉ {scores.overall}/100, Ph√°t √¢m {scores.pronunciation}/100, ƒê·ªô tr√¥i ch·∫£y {scores.fluency}/100, Ng·ªØ ƒëi·ªáu {scores.intonation}/100, Tr·ªçng √¢m {scores.stress}/100
- L·ªói ph√°t hi·ªán: {error_summary}

**H∆∞·ªõng d·∫´n:** Vi·∫øt b√°o c√°o ph·∫£n h·ªìi to√†n di·ªán theo c·∫•u tr√∫c ch√≠nh x√°c sau ƒë√¢y (b·∫±ng ti·∫øng Vi·ªát):

**Ph·∫£n H·ªìi V·ªÅ L·ªói Ph√°t √Çm V√† Chi·∫øn L∆∞·ª£c C·∫£i Thi·ªán üåü**

**L·ªùi Gi·ªõi Thi·ªáu:**
Cung c·∫•p l·ªùi ƒë·ªông vi√™n v·ªÅ h√†nh tr√¨nh h·ªçc ti·∫øng Anh c·ªßa h·ªç, th·ª´a nh·∫≠n n·ªó l·ª±c v√† t·∫°o ra t√¥ng m√†u t√≠ch c·ª±c cho vi·ªác c·∫£i thi·ªán.

**Ph√¢n T√≠ch L·ªói:**
ƒê·ªëi v·ªõi m·ªói l·ªói ph√°t √¢m ƒë∆∞·ª£c ph√°t hi·ªán:
1. X√°c ƒë·ªãnh r√µ r√†ng t·ª´ n√†o ƒë∆∞·ª£c ph√°t √¢m sai (mong ƒë·ª£i vs th·ª±c t·∫ø)
2. Gi·∫£i th√≠ch s·ª± kh√°c bi·ªát ng·ªØ √¢m c·ª• th·ªÉ, s·ª≠ d·ª•ng k√Ω hi·ªáu IPA khi h·ªØu √≠ch
3. Cung c·∫•p gi·∫£i th√≠ch ng√¥n ng·ªØ h·ªçc v·ªÅ l√Ω do ng∆∞·ªùi Vi·ªát th∆∞·ªùng m·∫Øc l·ªói n√†y
4. ƒê·ªÅ c·∫≠p ƒë·∫øn t√°c ƒë·ªông l√™n giao ti·∫øp/hi·ªÉu bi·∫øt

**H√†nh ƒê·ªông Kh·∫Øc Ph·ª•c:**
ƒê·ªëi v·ªõi m·ªói l·ªói, cung c·∫•p c√°c b√†i t·∫≠p c·ª• th·ªÉ, th·ª±c t·∫ø:
1. K·ªπ thu·∫≠t ph√°t √¢m t·ª´ng b∆∞·ªõc
2. H∆∞·ªõng d·∫´n v·ªã tr√≠ mi·ªáng/l∆∞·ª°i
3. Ph∆∞∆°ng ph√°p luy·ªán t·∫≠p (ghi √¢m, l·∫∑p l·∫°i, c·∫∑p t·ª´ t·ªëi thi·ªÉu)
4. Ti·∫øn tri·ªÉn t·ª´ √¢m ri√™ng l·∫ª ƒë·∫øn t·ª´ ƒë·∫øn c√¢u

**T√†i Nguy√™n B·ªï Sung:**
- ƒê·ªÅ xu·∫•t c√°c c√¥ng c·ª• tr·ª±c tuy·∫øn, ·ª©ng d·ª•ng ho·∫∑c trang web c·ª• th·ªÉ ƒë·ªÉ luy·ªán ph√°t √¢m
- Khuy·∫øn ngh·ªã c√°c b√†i t·∫≠p ph√π h·ª£p v·ªõi ng∆∞·ªùi Vi·ªát h·ªçc ti·∫øng Anh
- ƒê·ªÅ c·∫≠p ƒë·∫øn c√°c k·ªπ thu·∫≠t h·ªØu √≠ch nh∆∞ shadowing, drills ng·ªØ √¢m, v.v.

**L·ªùi ƒê·ªông Vi√™n:**
K·∫øt th√∫c b·∫±ng th√¥ng ƒëi·ªáp ƒë·ªông vi√™n nh·∫•n m·∫°nh ti·∫øn b·ªô, s·ª± ki√™n tr√¨ v√† t∆∞ duy t√≠ch c·ª±c. S·ª≠ d·ª•ng emoji kh√≠ch l·ªá.

**Y√™u c·∫ßu:**
- Gi·ªØ d∆∞·ªõi 500 t·ª´ nh∆∞ng ph·∫£i k·ªπ l∆∞·ª°ng v√† c·ª• th·ªÉ
- S·ª≠ d·ª•ng gi·ªçng ƒëi·ªáu h·ªó tr·ª£, gi√°o d·ª•c xuy√™n su·ªët
- Bao g·ªìm emoji li√™n quan ƒë·ªÉ l√†m cho ph·∫£n h·ªìi h·∫•p d·∫´n
- T·∫≠p trung v√†o l·ªùi khuy√™n c√≥ th·ªÉ h√†nh ƒë·ªông m√† h·ªçc vi√™n c√≥ th·ªÉ √°p d·ª•ng ngay l·∫≠p t·ª©c
- Th·ª´a nh·∫≠n ti·∫øn b·ªô v√† n·ªó l·ª±c c·ªßa h·ªç

H√£y t·∫°o ph·∫£n h·ªìi b·∫±ng ti·∫øng Vi·ªát:"""

            # Call Gemini API
            url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={self.gemini_api_key}"
            
            data = {
                "contents": [{
                    "parts": [{
                        "text": prompt
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.7,
                    "maxOutputTokens": 600,
                    "candidateCount": 1
                }
            }
            
            response = requests.post(url, headers={"Content-Type": "application/json"}, json=data, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                if "candidates" in result and len(result["candidates"]) > 0:
                    return result["candidates"][0]["content"]["parts"][0]["text"].strip()
            
            return ""
                
        except Exception as e:
            print(f"T·∫°o ph·∫£n h·ªìi LLM th·∫•t b·∫°i: {e}")
            return ""
    
    def _format_errors(self, word_errors: List[WordError]) -> str:
        """ƒê·ªãnh d·∫°ng l·ªói t·ª´ cho prompt"""
        if not word_errors:
            return "Kh√¥ng ph√°t hi·ªán l·ªói ƒë√°ng k·ªÉ"
        
        errors = []
        for error in word_errors[:3]:  # Top 3 errors
            if error.error_type == "substitution":
                errors.append(f"'{error.expected}' ‚Üí '{error.actual}'")
            elif error.error_type == "deletion":
                errors.append(f"Missing '{error.expected}'")
            elif error.error_type == "insertion":
                errors.append(f"Extra '{error.actual}'")
        
        return "; ".join(errors)